/* BEGIN_HEADER */
#include "mbedtls/blowfish.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_BLOWFISH_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void blowfish_encrypt_ecb( uint8_t * key_str, uint32_t key_len,
                           uint8_t * src_str, uint32_t src_str_len,
                           uint8_t * hex_dst_string,
                           uint32_t hex_dst_string_len, int setkey_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    TEST_ASSERT( mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 ) == setkey_result );
    if( setkey_result == 0 )
    {
        TEST_ASSERT( mbedtls_blowfish_crypt_ecb( &ctx, MBEDTLS_BLOWFISH_ENCRYPT, src_str, output ) == 0 );

        TEST_ASSERT( hexcmp( output, hex_dst_string, 8, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE */
void blowfish_decrypt_ecb( uint8_t * key_str, uint32_t key_len,
                           uint8_t * src_str, uint32_t src_str_len,
                           uint8_t * hex_dst_string,
                           uint32_t hex_dst_string_len, int setkey_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    TEST_ASSERT( mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 ) == setkey_result );
    if( setkey_result == 0 )
    {
        TEST_ASSERT( mbedtls_blowfish_crypt_ecb( &ctx, MBEDTLS_BLOWFISH_DECRYPT, src_str, output ) == 0 );

        TEST_ASSERT( hexcmp( output, hex_dst_string, 8, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void blowfish_encrypt_cbc( uint8_t * key_str, uint32_t key_len,
                           uint8_t * iv_str, uint32_t iv_str_len,
                           uint8_t * src_str, uint32_t data_len,
                           uint8_t * hex_dst_string,
                           uint32_t hex_dst_string_len, int cbc_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 );

    TEST_ASSERT( mbedtls_blowfish_crypt_cbc( &ctx, MBEDTLS_BLOWFISH_ENCRYPT, data_len , iv_str, src_str, output ) == cbc_result );
    if( cbc_result == 0 )
    {

        TEST_ASSERT( hexcmp( output, hex_dst_string, data_len, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void blowfish_decrypt_cbc( uint8_t * key_str, uint32_t key_len,
                           uint8_t * iv_str, uint32_t iv_str_len,
                           uint8_t * src_str, uint32_t data_len,
                           uint8_t * hex_dst_string,
                           uint32_t hex_dst_string_len, int cbc_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_cbc( &ctx, MBEDTLS_BLOWFISH_DECRYPT, data_len , iv_str, src_str, output ) == cbc_result );
    if( cbc_result == 0)
    {

        TEST_ASSERT( hexcmp( output, hex_dst_string, data_len, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void blowfish_encrypt_cfb64( uint8_t * key_str, uint32_t key_len,
                             uint8_t * iv_str, uint32_t iv_str_len,
                             uint8_t * src_str, uint32_t src_len,
                             uint8_t * hex_dst_string,
                             uint32_t hex_dst_string_len )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_cfb64( &ctx, MBEDTLS_BLOWFISH_ENCRYPT, src_len, &iv_offset, iv_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, src_len, hex_dst_string_len ) == 0 );

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void blowfish_decrypt_cfb64( uint8_t * key_str, uint32_t key_len,
                             uint8_t * iv_str, uint32_t iv_str_len,
                             uint8_t * src_str, uint32_t src_len,
                             uint8_t * hex_dst_string,
                             uint32_t hex_dst_string_len )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_cfb64( &ctx, MBEDTLS_BLOWFISH_DECRYPT, src_len, &iv_offset, iv_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, src_len, hex_dst_string_len ) == 0 );

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CTR */
void blowfish_encrypt_ctr( uint8_t * key_str, uint32_t key_len,
                           uint8_t * iv_str, uint32_t iv_str_len,
                           uint8_t * src_str, uint32_t src_len,
                           uint8_t * hex_dst_string,
                           uint32_t hex_dst_string_len )
{
    unsigned char stream_str[100];
    unsigned char output[100];
    mbedtls_blowfish_context ctx;
    size_t iv_offset = 0;

    memset(stream_str, 0x00, 100);
    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_ctr( &ctx, src_len, &iv_offset, iv_str, stream_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, src_len, hex_dst_string_len ) == 0 );

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */
