/* BEGIN_HEADER */
#include "mbedtls/aes.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_AES_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void aes_encrypt_ecb( uint8_t * key_str, uint32_t key_len, uint8_t * src_str,
                      uint32_t src_str_len, uint8_t * hex_dst_string,
                      uint32_t hex_dst_string_len, int setkey_result )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    TEST_ASSERT( mbedtls_aes_setkey_enc( &ctx, key_str, key_len * 8 ) == setkey_result );
    if( setkey_result == 0 )
    {
        TEST_ASSERT( mbedtls_aes_crypt_ecb( &ctx, MBEDTLS_AES_ENCRYPT, src_str, output ) == 0 );

        TEST_ASSERT( hexcmp( output, hex_dst_string, 16, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE */
void aes_decrypt_ecb( uint8_t * key_str, uint32_t key_len, uint8_t * src_str,
                      uint32_t src_str_len, uint8_t * hex_dst_string,
                      uint32_t hex_dst_string_len, int setkey_result )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    TEST_ASSERT( mbedtls_aes_setkey_dec( &ctx, key_str, key_len * 8 ) == setkey_result );
    if( setkey_result == 0 )
    {
        TEST_ASSERT( mbedtls_aes_crypt_ecb( &ctx, MBEDTLS_AES_DECRYPT, src_str, output ) == 0 );

        TEST_ASSERT( hexcmp( output, hex_dst_string, 16, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void aes_encrypt_cbc( uint8_t * key_str, uint32_t key_len, uint8_t * iv_str,
                      uint32_t iv_str_len, uint8_t * src_str,
                      uint32_t data_len, uint8_t * hex_dst_string,
                      uint32_t hex_dst_string_len, int cbc_result )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    mbedtls_aes_setkey_enc( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_aes_crypt_cbc( &ctx, MBEDTLS_AES_ENCRYPT, data_len, iv_str, src_str, output ) == cbc_result );
    if( cbc_result == 0 )
    {

        TEST_ASSERT( hexcmp( output, hex_dst_string, data_len, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void aes_decrypt_cbc( uint8_t * key_str, uint32_t key_len, uint8_t * iv_str,
                      uint32_t iv_str_len, uint8_t * src_str,
                      uint32_t data_len, uint8_t * hex_dst_string,
                      uint32_t hex_dst_string_len, int cbc_result )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    mbedtls_aes_setkey_dec( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_aes_crypt_cbc( &ctx, MBEDTLS_AES_DECRYPT, data_len, iv_str, src_str, output ) == cbc_result );
    if( cbc_result == 0)
    {

        TEST_ASSERT( hexcmp( output, hex_dst_string, data_len, hex_dst_string_len ) == 0 );
    }

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_encrypt_cfb128( uint8_t * key_str, uint32_t key_len,
                         uint8_t * iv_str, uint32_t iv_str_len,
                         uint8_t * src_str, uint32_t src_str_len,
                         uint8_t * hex_dst_string, uint32_t hex_dst_string_len
                         )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    mbedtls_aes_setkey_enc( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_aes_crypt_cfb128( &ctx, MBEDTLS_AES_ENCRYPT, 16, &iv_offset, iv_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, 16, hex_dst_string_len ) == 0 );

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_decrypt_cfb128( uint8_t * key_str, uint32_t key_len,
                         uint8_t * iv_str, uint32_t iv_str_len,
                         uint8_t * src_str, uint32_t src_str_len,
                         uint8_t * hex_dst_string, uint32_t hex_dst_string_len
                         )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    mbedtls_aes_setkey_enc( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_aes_crypt_cfb128( &ctx, MBEDTLS_AES_DECRYPT, 16, &iv_offset, iv_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, 16, hex_dst_string_len ) == 0 );

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_encrypt_cfb8( uint8_t * key_str, uint32_t key_len, uint8_t * iv_str,
                       uint32_t iv_str_len, uint8_t * src_str,
                       uint32_t src_len, uint8_t * hex_dst_string,
                       uint32_t hex_dst_string_len )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    mbedtls_aes_setkey_enc( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_aes_crypt_cfb8( &ctx, MBEDTLS_AES_ENCRYPT, src_len, iv_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, src_len, hex_dst_string_len ) == 0 );

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_decrypt_cfb8( uint8_t * key_str, uint32_t key_len, uint8_t * iv_str,
                       uint32_t iv_str_len, uint8_t * src_str,
                       uint32_t src_len, uint8_t * hex_dst_string,
                       uint32_t hex_dst_string_len )
{
    unsigned char output[100];
    mbedtls_aes_context ctx;

    memset(output, 0x00, 100);
    mbedtls_aes_init( &ctx );


    mbedtls_aes_setkey_enc( &ctx, key_str, key_len * 8 );
    TEST_ASSERT( mbedtls_aes_crypt_cfb8( &ctx, MBEDTLS_AES_DECRYPT, src_len, iv_str, src_str, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string, src_len, hex_dst_string_len ) == 0 );

exit:
    mbedtls_aes_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SELF_TEST */
void aes_selftest(  )
{
    TEST_ASSERT( mbedtls_aes_self_test( 1 ) == 0 );
}
/* END_CASE */
