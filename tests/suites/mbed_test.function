/*
 * *** THIS FILE HAS BEEN MACHINE GENERATED ***
 *
 * This file has been machine generated using the script: $0
 *
 * Test file      : {test_file}
 *
 * The following files were used to create this file.
 *
 *      Main code file  : {test_main_file}
 *      Helper file     : {test_common_helper_file}
 *      Test suite file : {test_case_file}
 *      Test suite data : {test_case_data_file}
 *
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */

#include "greentea-client/test_env_c.h"

#if !defined(MBEDTLS_CONFIG_FILE)
#include <mbedtls/config.h>
#else
#include MBEDTLS_CONFIG_FILE
#endif


{function_headers}


/*----------------------------------------------------------------------------*/
/* Common helper code */

{test_common_helpers}


/*----------------------------------------------------------------------------*/
/* Parameter parsing code */

int serial_get_int(int arg_idx){{
    char key[2];
    char val[10];
    int ret;

    snprintf(val, sizeof(val), "%d", arg_idx);
    greentea_send_kv_c("I", val);
    ret = greentea_parse_kv_c(key, val, sizeof(key), sizeof(val));
    if (ret == 0) {{
        test_errors++;
        return -1;
    }}
    return atoi(val);
}}

char * serial_alloc_get_string(int arg_idx) {{
    char key[2];
    char val[10];
    char * data = NULL;
    int size = 0;
    int ret;

    snprintf(val, sizeof(val), "%d", arg_idx);
    greentea_send_kv_c("S", val);
    ret = greentea_parse_kv_c(key, val, sizeof(key), sizeof(val));
    if (ret == 0) {{
        test_errors++;
        return NULL;
    }}
    size = atoi(val);
    if (size) {{
        char * data = (char *)malloc(size + 1);
        snprintf(val, sizeof(val), "%d", arg_idx);
        greentea_send_kv_c("D", val);
        if (data != NULL) {{
            ret = greentea_parse_kv_c(key, data, sizeof(val), size + 1);
            if (ret == 0) {{
                test_errors++;
                free(data);
                data = NULL;
            }}
        }} else {{
            printf ("Memory allocation failed!");
            test_errors++;
        }}
    }}
    return data;
}}

void test_dependency_not_supported(){{
    printf ("Test dependency not supported\r\n");
    test_errors++;
}}

/*----------------------------------------------------------------------------*/
/* Test Suite Code */


#line 1 "mbed_test.function"
#define TEST_SUITE_ACTIVE


/*----------------------------------------------------------------------------*/
/* Test Case code */

{functions_code}

{dispatch_wrappers}

//#line !LINE_NO! "mbed_test.function"


/*----------------------------------------------------------------------------*/
/* Test dispatch code */

#define TEST_CASE_COUNT {test_count}

void (*dispatch_table[TEST_CASE_COUNT])(void) = {{
{dispatch_code} 
}};

/*----------------------------------------------------------------------------*/
/* Main Test code */


int main(int argc, const char *argv[]) {{
    char key[50];
    char val[10];

    GREENTEA_SETUP_C(120, "mbedtls_test");

    while (1) {{
        fflush(stdout);
        test_errors = 0;
        greentea_send_kv_c("start_test", " ");
        if (greentea_parse_kv_c(key, val, sizeof(key), sizeof(val))) {{
            if (strcmp(key, "call") == 0) {{
                int idx = atoi(val);
                test_errors = 0;
                if (idx > -1 && idx < TEST_CASE_COUNT){{
                    dispatch_table[idx]();
                }} else {{
                    test_errors++;
                    printf ("Invalid test index %d\r\n", idx);
                }}
                greentea_send_kv_c("result", (test_errors)?"0":"1");
            }} else {{
                printf ("Unexpected K,V pair: %s;%s\r\n", key, val);
                greentea_send_kv_c("result", "0");
            }}
        }} else {{
            printf ("Unexpected EOF received\r\n");
            greentea_send_kv_c("result", "0");
            continue;
        }}
    }}
}}

