/*
 * *** THIS FILE HAS BEEN MACHINE GENERATED ***
 *
 * This file has been machine generated using the script: $0
 *
 * Test file      : {test_file}
 *
 * The following files were used to create this file.
 *
 *      Main code file  : {test_main_file}
 *      Helper file     : {test_common_helper_file}
 *      Test suite file : {test_case_file}
 *      Test suite data : {test_case_data_file}
 *
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */

#include "greentea-client/test_env_c.h"

#if !defined(MBEDTLS_CONFIG_FILE)
#include <mbedtls/config.h>
#else
#include MBEDTLS_CONFIG_FILE
#endif

#define MBEDTLS_TEST_ERROR_FUNC_NOT_FOUND               0xf100
#define MBEDTLS_TEST_ERROR_DEPENDENCY_NOT_SUPPORTED     0xf200
#define MBEDTLS_TEST_ERROR_GT_PARSE_ERROR               0xf400


{function_headers}


/*----------------------------------------------------------------------------*/
/* Common helper code */

{test_common_helpers}


/*----------------------------------------------------------------------------*/
/* Parameter parsing code */

typedef void (*TestWrapper_t)(void **);

int get_expression(int exp_id, int * out) {{
{expression_code}
    {{
        return 1;
    }}
    return 0;
}}

void free_params(void ** params){{
    void ** p = params;
    while(*p){{
        free(*p);
        p++;
    }}
    free(params);
}}

void ** serial_parse_arguments() {{
    int ret, num_args, int_val;
    char key[2];
    char val[10], num[10];
    void ** params = NULL;

    // Get no. of arguments
    greentea_send_kv_c("SC", " ");
    ret = greentea_parse_kv_c(key, val, sizeof(key), sizeof(val));
    if (ret == 0) {{
        // received eof while receiving data
        // failed to parse arguments
        return NULL;
    }}
    // Covert number of param string to int
    num_args = atoi(val);

    // allocate params array based on num arguments
    params = (void **)malloc(sizeof(void *) * (num_args + 1));
    for (int i = 0; i < (num_args + 1); i++){{
        params[i] = NULL;
    }}

    for (int i = 0; i < num_args; i++){{
        snprintf(num, sizeof(num), "%d", i);
        printf ("Requesting param %s\r\n", num);
        greentea_send_kv_c("SP", num);
        ret = greentea_parse_kv_c(key, val, sizeof(key), sizeof(val));
        if (ret == 0) {{
            free_params(params);
            return NULL;
        }}

        int_val = atoi(val);
        printf ("Got argument type %s of len %d\r\n", key, int_val);

        switch(key[0]){{
            case 'I': {{
                          // convert val into integer and store in the array
                          params[i] = malloc(sizeof(int));
                          *((int *)params[i]) = int_val;
                      }}
                      break;
            case 'S':
            case 'H': {{
                          params[i] = malloc(int_val + 1);
                          if (int_val > 0){{
                              // receive hex/string
                              greentea_send_kv_c("D", num);
                              ret = greentea_parse_kv_c(key, (char *)params[i], sizeof(key), int_val + 1);
                          }}
                          ((char *)params[i])[int_val] = 0; // Null terminate special for 0 len strings
                      }}
                      break;
            case 'E': {{
                          params[i] = malloc(sizeof(int));
                          assert (get_expression(int_val, (int *)params[i]) == 0);
                      }}
                      break;
            default: {{
                         // Wrong type received
                         free_params(params);
                         return NULL;
                     }}
                     break;
        }}
    }}
    return params;
}}

/*----------------------------------------------------------------------------*/
/* Test Suite Code */


#line 1 "main_test.function"
#define TEST_SUITE_ACTIVE


/*----------------------------------------------------------------------------*/
/* Test Case code */

{functions_code}

//#line !LINE_NO! "main_test.function"


/*----------------------------------------------------------------------------*/
/* Test dispatch code */

int dep_check( int dep_id )
{{
{dep_check_code}

//#line !LINE_NO! "main_test.function"
    {{
         return( DEPENDENCY_NOT_SUPPORTED );
    }}
}}

TestWrapper_t test_funcs[] = {{
{dispatch_code} 
}};


/*----------------------------------------------------------------------------*/
/* Main Test code */


int main(int argc, const char *argv[]) {{
    char key[50];
    char val[100];

    GREENTEA_SETUP_C(180, "mbedtls_test");
    greentea_send_kv_c("GO", " ");

    while (1) {{
        test_errors = 0;
        if (greentea_parse_kv_c(key, val, sizeof(key), sizeof(val))) {{
            if (strcmp(key, "CD") == 0) {{
                if (dep_check(atoi(val)) == DEPENDENCY_SUPPORTED) {{
                    greentea_send_kv_c("CD", "1");
                    continue; // Skip sending go as that changes to next test. Spec: CD==1 should follow CD or T
                }} else {{
                    test_errors = MBEDTLS_TEST_ERROR_DEPENDENCY_NOT_SUPPORTED;
                }}
            }} else if (strcmp(key, "T") == 0) {{
                TestWrapper_t fp = NULL;
                int func_idx = atoi(val);
                if (func_idx < sizeof(test_funcs)/sizeof(TestWrapper_t)) {{
                    fp = test_funcs[func_idx];
                }}
                if (fp) {{
                    void ** params = serial_parse_arguments();
                    if (params) {{
                        greentea_send_kv_c("ST", " ");
                        fp(params);
                        free_params(params);
                    }} else {{
                        test_errors = MBEDTLS_TEST_ERROR_GT_PARSE_ERROR;
                    }}
                }} else {{
                    test_errors = MBEDTLS_TEST_ERROR_FUNC_NOT_FOUND;
                }}
            }} else {{
                test_errors = MBEDTLS_TEST_ERROR_GT_PARSE_ERROR;
            }}
        }} else {{
            test_errors = MBEDTLS_TEST_ERROR_GT_PARSE_ERROR;
        }}
        snprintf(val, sizeof(val), "%d", test_errors); // TBD: htonl 
        greentea_send_kv_c("R", val);
    }}
}}

